name: Build & Deploy to AWS ECS

# Trigger on push to main (you can add pull_request if you want)
on:
  push:
    branches: [ "main" ]

concurrency:
  group: midterm
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU (optional, for multi-arch) 
        uses: docker/setup-qemu-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build image and push to ECR
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          set -e
          IMAGE_TAG=$(date +%s)
          REGISTRY=${{ steps.login-ecr.outputs.registry }}
          IMAGE_NAME=${REGISTRY}/${ECR_REPOSITORY}:$IMAGE_TAG

          echo "Building image $IMAGE_NAME"
          docker build -t $IMAGE_NAME .

          echo "Pushing image to ECR"
          docker push $IMAGE_NAME

          echo "IMAGE_TO_DEPLOY=$IMAGE_NAME" >> $GITHUB_ENV

      - name: Register new task definition (override image)
        # This step assumes you have a task definition file (task-def.json) in repo
        run: |
          set -e
          # Replace the "containerDefinitions" image with our new image using jq.
          # Create a temporary taskdef file with updated image.
          jq --arg IMAGE "$IMAGE_TO_DEPLOY" '.containerDefinitions[0].image = $IMAGE' task-def.json > task-def-updated.json
          aws ecs register-task-definition \
            --cli-input-json file://task-def-updated.json \
            --region ${{ secrets.AWS_REGION }}
        env:
          IMAGE_TO_DEPLOY: ${{ env.IMAGE_TO_DEPLOY }}

      - name: Deploy service (update service to use the new task definition)
        run: |
          # Find the family revision we just registered and update the service
          TASK_FAMILY=$(jq -r '.family' task-def.json)
          NEW_REVISION=$(aws ecs list-task-definitions --family-prefix "$TASK_FAMILY" --status ACTIVE --region ${{ secrets.AWS_REGION }} --query 'sort_by(taskDefinitionArns,&@)[-1]' --output text)
          echo "New task definition ARN: $NEW_REVISION"
          aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER }} --service ${{ secrets.ECS_SERVICE }} --task-definition "$NEW_REVISION" --region ${{ secrets.AWS_REGION }}
